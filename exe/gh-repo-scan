#!/usr/bin/env ruby

require 'github/scanner'
require 'slop' # option parsing

class GitHubRepoScan
  def initialize
    @progname = File.basename $0
    @opts = nil
    @name_width = 20
  end

  def main
    @opts = Slop.parse do |opt|
      opt.banner = "usage: #{@progname} [ls|list|cat|total|json] [OPTIONS]"

      opt.bool    '--all',          'Include all repos, archived and active. Default is only active.'
      opt.bool    '--archived',     'Include only archived repos in the scan'
      opt.integer '--text-context', '-C', 'Lines of files context to show', default: 10
      opt.bool    '--repo-divider', 'Show repo divider line in cat', default: true
      opt.bool    '--repo-prefix',  'Prefix lines with repo name in cat', default: true
      opt.string  '--path',         'File path in the repo to scan', default: ''
      opt.string  '--grep',         'File contents match this regex', default: ''
      opt.string  '--grep-exclude', 'File contents do not match this regex', default: ''
      opt.bool    '--long', '-l',   'Long list format'
      opt.bool    '--count',        'Show count on repo matches and total at the end'
      opt.bool    '--json',         'Output the JSON returned for each repo instead of normal list output'
      opt.bool    '--task-list',    'Markdown task list format list'

      opt.on '--version', 'print the version' do
        puts GitHub::Scanner::VERSION
        exit
      end
    end

    exit_usage! 'No action given' if @opts.arguments.size != 1
    act = @opts.arguments[0].to_sym
    exit_usage! "Unknown action: #{act}" unless self.respond_to? act
    self.send(act)
  end

  def exit_usage!(msg = '')
    puts msg if msg != ''
    puts @opts
    exit 1
  end

  def total
    puts "Total Repos: %i" % GitHub::Scanner.total_repos
  end

  def list
    # Max repos scanned, we wont get all these, but handy for sizing columns and things
    tc = GitHub::Scanner.total_repos.to_s.size
    scan.run({ repoFirst: 20, filePath: @opts[:path] }).each_with_index do |repo, i|
      puts list_line(i+1, repo, c_width: tc)
    end
    if @opts[:count]
      puts "%i repos matched, %i scanned" % [scan.matched, scan.scanned]
    end
  end

  alias :ls :list

  private def list_line(c, repo, c_width: 2)
    if @opts[:json]
      puts JSON.pretty_generate repo
      return
    end

    line = if @opts[:task_list]
      "* [ ] "
    elsif @opts[:count]
      "%#{c_width}d " % c
    else
      ""
    end
    name        = repo['nameWithOwner']
    @name_width = name.to_s.size if name.to_s.size > @name_width
    arch        = repo['isArchived'] ? "ARCHIVED " : ""
    line += "%-#{@name_width}s %s" % [name, arch]

    return line unless @opts[:long]
    
    branch = repo.dig 'defaultBranch', 'target'
    return line + "EMPTY" if branch.nil?

    sha      = branch['oid']
    fname    = branch.dig 'file', 'path' # includes name
    authDate = branch['authoredDate']
    authName = branch.dig 'author', 'name'
    line += " #{fname} #{sha[0..8]} #{authDate} #{authName}"
    line
  end

  # cat contents of repo's path to stdout
  def cat
    scan.run({ repoFirst: 10, filePath: @opts[:path] }).each do |repo|
      name  = repo['nameWithOwner']
      sha   = repo.dig 'defaultBranch', 'target', 'oid'
      fname = repo.dig 'defaultBranch', 'target', 'file', 'path' # includes name
      puts "==> #{name} #{fname}@#{sha} <==============================" if @opts[:repo_divider]
      text = repo.dig('defaultBranch', 'target', 'file', 'object', 'text')
      unless text
        puts "<no match>"
        next
      end
      prefix = @opts[:repo_prefix] ? "#{name}: " : ""
      puts prefix + text.split(/\n/).first(@opts[:text_context]).join("\n#{prefix}")
    end
  end

  private def scan
    unless @scan
      @scan = GitHub::Scanner.scan(@opts[:path] ? :repo_file : :repo)
      @scan.archived   = @opts[:archived]
      @scan.all        = @opts[:all]
      @scan.add_filter { |r| repo_filter r }
    end
    @scan
  end

  # Given a repo, return true to include the repo, false to exclude
  private def repo_filter(repo)
    return false if @opts[:path] && repo.dig('defaultBranch', 'target', 'file').nil?

    return true if @opts[:grep].empty? && @opts[:grep_exclude].empty?
    text = repo.dig('defaultBranch', 'target', 'file', 'object', 'text')
    return false unless text
    return false unless @opts[:grep].empty? || text =~ /#{@opts[:grep]}/m
    return false unless @opts[:grep_exclude].empty? || text !~ /#{@opts[:grep_exclude]}/m
    true
  end
end

GitHubRepoScan.new.main
